---
title: 'Speed test for pypomp on cpu and gpu'
jupyter: python3
embed-resources: true
format: 
    html:
        page-layout: full

---

## This is somewhat deprecated.

* More recently, the code in `speed/cpu/report.py` and `speed/gpu/report.py` has been run directly, e.g., via
```
python -m report
```
and output copied into `notes.txt`. Additionally, `test.py` has been developed as a simpler piece of code for experimentation.

* `speed/cpu/report.py` and `speed/gpu/report.py` are currently identical, produced by
```
make report.py
```
in the `speed/cpu` directory, which in turn is extracted from `speed/cpu/report.qmd`


## CPU experiment

```{python}
#| label: run_level
#| echo: false
import os
import datetime
import shutil
from importlib.metadata import version

run_level = 2

out_dir="results_" + str(run_level)

cpu_out_dir = "cpu/" + out_dir 
gpu_out_dir = "gpu/" + out_dir 

if not os.path.exists(cpu_out_dir):
    exit("no results for cpu")

```


Testing pypomp `{python} version('pypomp')` on `{python} datetime.date.today().strftime("%Y-%m-%d")` at run level `{python} run_level` (0 is for debugging, 2 is full-length).

```{python}
#| label: imports
#| echo: false
import jax
import time
import pypomp as pp
import unittest
import tracemalloc
import jax.numpy as jnp
import numpy as np
import pandas as pd

# for saving partial results
import pickle

# import pykalman
import seaborn as sns
import matplotlib.pyplot as plt
import jax.scipy.special
from jax.scipy.special import logit, expit

from tqdm import tqdm
```

```{python}
#| label: read-cpu-mif-results
#| echo: true
pickle_file = cpu_out_dir + "/mif-test.pkl"
file = open(pickle_file,'rb')
#[elapsed1,loglik1,elapsed2,loglik2] = pickle.load(file)
[elapsed1,elapsed2] = pickle.load(file)
# Check that first log-likelihood evaluation, `{python} str(round(loglik1,6))`, matches second evaluation,  `{python} str(round(loglik2,6))`. 
```

Time taken for `mif` on cpu: first call `{python} round(elapsed1,6)`s, second call  `{python} round(elapsed2,6)`s.

```{python}
#| label: read-cpu-pfilter-results
#| echo: true
pickle_file = cpu_out_dir + "/pfilter-test.pkl"
file = open(pickle_file,'rb')
# [elapsed3,loglik3,elapsed4,loglik4] = pickle.load(file)
[elapsed3,elapsed4] = pickle.load(file)
# Check that first log-likelihood evaluation, `{python} str(round(loglik3,6))`, matches second evaluation,  `{python} str(round(loglik4,6))`. 
```

Time taken: first call `{python} round(elapsed3,6)`s, second call  `{python} round(elapsed4,6)`s.





## Move on to the GPU experiment

```{python}
#| label: read-gpu-mif-results
#| echo: true
pickle_file = gpu_out_dir + "/mif-test.pkl"
file = open(pickle_file,'rb')
[elapsed1,loglik1,elapsed2,loglik2] = pickle.load(file)
#[elapsed1,elapsed2] = pickle.load(file)
#Check that first log-likelihood evaluation, `{python} str(round(loglik1,6))`, matches second evaluation,  `{python} str(round(loglik2,6))`. 
```

Time taken for `mif` on gpu: first call `{python} round(elapsed1,6)`s, second call  `{python} round(elapsed2,6)`s.

```{python}
#| label: read-gpu-pfilter-results
#| echo: true
pickle_file = gpu_out_dir + "/pfilter-test.pkl"
file = open(pickle_file,'rb')
#[elapsed3,elapsed4] = pickle.load(file)
[elapsed3,loglik3,elapsed4,loglik4] = pickle.load(file)

```

Time taken: first call `{python} round(elapsed3,6)`s, second call  `{python} round(elapsed4,6)`s.

Check that first log-likelihood evaluation, `{python} str(round(loglik3,6))`, matches second evaluation,  `{python} str(round(loglik4,6))`. 

