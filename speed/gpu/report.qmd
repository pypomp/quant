---
title: 'Speed test for pypomp'
jupyter: python3
embed-resources: true
format: 
    html:
        page-layout: full
execute:
    daemon: false
---

```{python}
#| label: run_level
#| echo: false
import os
import platform
import datetime
import shutil
from importlib.metadata import version

run_level = 2

out_dir="results_" + str(run_level)

# clean the cached results automatically
# unlike other quant tests, these are relatively quick and will always replace saved files
if os.path.exists(out_dir):
    shutil.rmtree(out_dir)

os.makedirs(out_dir)


# N = [10, 50, 100][run_level]
J = [10,100,1000][run_level]
```

Testing pypomp `{python} version('pypomp')` on `{python} datetime.date.today().strftime("%Y-%m-%d")` at run level `{python} run_level` (0 is for debugging, 2 is full-length).

```{python}
#| label: imports
#| echo: false
import jax
import time
import pypomp as pp
import unittest
import tracemalloc
import jax.numpy as jnp
import numpy as np
import pandas as pd

# for saving partial results
import pickle

# import pykalman
import seaborn as sns
import matplotlib.pyplot as plt
import jax.scipy.special
from jax.scipy.special import logit, expit

from tqdm import tqdm

# we could explicitly ask for a cpu test, but this is usually not necessary
# instead, we record what jax is using, via print(jax.devices())
# jax.config.update("jax_platform_name", "cpu")

```

```{python}
#| label: oo-test
#| echo: true
d = pp.dacca()
start = time.perf_counter()
#loglik1,params1 = d.mif(
mif_out1 = d.mif(
    sigmas=0.02, sigmas_init=0.1, M=1, a=0.9, J=J, key=jax.random.key(111), thresh=0, monitor=False
)
end = time.perf_counter()
elapsed1 = end - start

# We could check that the loglik values match
# loglik1 = mif_out1['logLik'][-1]

start = time.perf_counter()
#loglik2,params2 = d.mif(
mif_out2 = d.mif(
    sigmas=0.02, sigmas_init=0.1, M=1, a=0.9, J=J, key=jax.random.key(111), thresh=0, monitor=False
)
end = time.perf_counter()
elapsed2 = end - start

# loglik2 = mif_out2['logLik'][-1]

pickle_file = out_dir + "/mif-test.pkl"
#pickle_data = [elapsed1,loglik1,elapsed2,loglik2]
pickle_data = [elapsed1,elapsed2]
file=open(pickle_file,'wb')
pickle.dump(pickle_data,file)
```

```{python}
#| label: functional-test
#| echo: true
#| eval: true

import pypomp.pfilter
start = time.perf_counter()
loglik3 = pypomp.pfilter(theta=d.theta,
    ys =d.ys, J = J, rinit = d.rinit, rproc = d.rproc,
    dmeas = d.dmeas, covars = d.covars, thresh = -1,key=jax.random.key(111))
end = time.perf_counter()
elapsed3 = end - start
start = time.perf_counter()
loglik4 = pypomp.pfilter(theta=d.theta,
    ys =d.ys, J = J, rinit = d.rinit, rproc = d.rproc,
    dmeas = d.dmeas, covars = d.covars, thresh = -1,key=jax.random.key(111))
end = time.perf_counter()
elapsed4 = end - start
pickle_file = out_dir + "/pfilter-test.pkl"
#pickle_data = [elapsed3,loglik3,elapsed4,loglik4]
pickle_data = [elapsed3,elapsed4]
file=open(pickle_file,'wb')
pickle.dump(pickle_data,file)

#pp.mop(J = J, rinit = d.rinit.struct_pf, rprocess = d.rprocess.struct_pf, dmeasure = d.dmeasure, theta = d.theta, ys = d.ys, covars = d.covars, alpha = 0.9)

# We could check that first log-likelihood evaluation, `{python} str(round(loglik3,6))`, matches second evaluation,  `{python} str(round(loglik4,6))`. 

```

Time taken: first call `{python} round(elapsed3,6)`s, second call  `{python} round(elapsed4,6)`s.



```{python}
#| label: terminal-output
#| echo: false
#| eval: true
print(
    datetime.date.today().strftime("%Y-%m-%d"), "pypomp speed test using",jax.devices(), 
    "\npypomp", version('pypomp'), "for dacca with J =", J,
    "\nPython", platform.python_version(),
        ", jax", version('jax'), ", jaxlib", version('jaxlib'),
    "\nmif: with jit", round(elapsed1,6), "s, ",
        "pre-jitted", round(elapsed2,6), "s",
    "\npfilter: with jit", round(elapsed3,6), "s, ",
        "pre-jitted", round(elapsed4,6), "s \n"
)


```
